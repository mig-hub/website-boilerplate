// Vars

$vendors: ('-webkit-','-moz-','-ms-','-o-','');
$body-size: 16px;
$ref-width: 1280px;
$tablet-breakpoint: 1000px;
$phone-breakpoint: 700px;

$mobile: (body-size: 16px, ref-width: 800px, breakpoint: 800px);

// Helpers

@function em($size, $font-size: $body-size) {
  @return ($size / $font-size) + 0em;
}

@function line-height($size, $font-size: $body-size) {
  @return ($size / $font-size);
}

@mixin set-body-size($size: $body-size, $width: $ref-width) {
  // For font-size in vw
  // Use in body at the top and then use ems for everything else
  font-size: em($size, 16px);
  font-size: (($size / $width * 100) + 0vw);
}

@mixin font-size($size, $line-height: normal, $font-size: $body-size) {
  // Sets font-size and line-height in one go
  font-size: em($size, $font-size);
  @if $line-height != normal {
    line-height: line-height($line-height, $size);
  }
}

@mixin portrait {
  @media screen and (orientation: portrait) {
    @content;
  }
}

@mixin landscape {
  @media screen and (orientation: landscape) {
    @content;
  }
}

@mixin breakpoint($name) {
  @media screen and (max-width: map-get($name, breakpoint)) {
    $tmp-size: $body-size;
    $tmp-width: $ref-width;
    $body-size: map-get($name, body-size) !global;
    $ref-width: map-get($name, ref-width) !global;
    @content;
    $body-size: $tmp-size !global;
    $ref-width: $tmp-width !global;
  }
}

@mixin mobile {
  @include breakpoint($mobile) {
    @content;
  }
}

@mixin portrait-or($name) {
  @media screen and (orientation: portrait), screen and (max-width: map-get($name, breakpoint)) {
    $tmp-size: $body-size;
    $tmp-width: $ref-width;
    $body-size: map-get($name, body-size) !global;
    $ref-width: map-get($name, ref-width) !global;
    @content;
    $body-size: $tmp-size !global;
    $ref-width: $tmp-width !global;
  }
}

@mixin landscape-not($name) { // Opposite of portrait-or
  @media screen and (orientation: landscape) and (min-width: map-get($name, breakpoint)) {
    @content;
  }
}


@mixin portrait-or-mobile {
  @include portrait-or($mobile) {
    @content;
  }
}

@mixin landscape-not-mobile { // Opposite of portrait-or-mobile
  @include landscape-not($mobile) {
    @content;
  }
}

@mixin inline-block {
  display: -moz-inline-stack;
  display: inline-block;
}

@mixin flexbox {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex:  $values;
  -webkit-flex:  $values;
  -ms-flex:  $values;
  flex:  $values;
}

@mixin order($val) {
  -webkit-box-ordinal-group: $val;
  -moz-box-ordinal-group: $val;
  -ms-flex-order: $val;
  -webkit-order: $val;
  order: $val;
}

@mixin vendor($key, $val...) {
  // Low level mixin for prepending a property with known vendor prefixes
  @each $vendor in $vendors {
    #{$vendor}#{$key}: $val; 
  }
}

@mixin transition($val...) {
  @include vendor(transition, $val);
}

@mixin transform($val...) {
  @include vendor(transform, $val);
}

@mixin box-sizing($val...) {
  @include vendor(box-sizing, $val);
}

@mixin column-count($val...) {
  @include vendor(column-count, $val);
}

@mixin column-gap($val...) {
  @include vendor(column-gap, $val);
}

@mixin opacity($val) {
  $ieval: $val*100;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$ieval+")";
  filter: alpha(opacity=$ieval);
  -moz-opacity: $val;
  -khtml-opacity: $val;
  opacity: $val;
}

@mixin fixed-proportions-wrap($width: 16, $height: 9) {
  position: relative; 
  height: 0; overflow: hidden;
  padding-bottom: ($height / $width * 100%);
  & > * {
    position: absolute; left: 0; top: 0;
    width: 100%; height: 100%;
  }
}

@mixin grid-with-prefix($prefix) {
  // Creates most used sizes for a grid
  .#{$prefix}-1-12  { width: (100% / 12); }
  .#{$prefix}-1-8   { width: (100% / 8);}
  .#{$prefix}-1-6   { width: (100% / 6); }
  .#{$prefix}-1-4   { width: 25%; }
  .#{$prefix}-1-3   { width: (100% / 3); }
  .#{$prefix}-1-2   { width: 50%; }
  .#{$prefix}-2-3   { width: (100% / 3 * 2); }
  .#{$prefix}-3-4   { width: 75%; }
  .#{$prefix}-1-1   { width: 100%; }
}

@mixin optional-at-root($sel) {
  @at-root #{if(not &, $sel, selector-append(&, $sel))} {
    @content;
  }
}

@mixin placeholder {
  @include optional-at-root('::-webkit-input-placeholder') {
    @content;
  }
  @include optional-at-root(':-moz-placeholder') {
    @content;
  }
  @include optional-at-root('::-moz-placeholder') {
    @content;
  }
  @include optional-at-root(':-ms-input-placeholder') {
    @content;
  }
  @include optional-at-root('::-ms-input-placeholder') {
    @content;
  }
  @include optional-at-root('::placeholder') {
    @content;
  }
}

// Resets

* { @include box-sizing(border-box); }

img { border: 0; margin: 0; padding: 0; width: 100%; display: block; }
.not-100-percent { width: auto; }
ul, ol { list-style: none; margin: 0; padding: 0; }
html { 
  font-size: 100%; 
  //  text-rendering: optimizeLegibility;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
body, html { margin: 0; padding: 0; }
address { font-style: normal; }

article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display:block;
}

iframe { border: 0; }

a { color: inherit; }

// Layout

.center-div { margin-left: auto; margin-right: auto; }

.margin-top-0,
.strip-margins-container > *:first-child {
  margin-top: 0;
}
.margin-bottom-0,
.strip-margins-container > *:last-child {
  margin-bottom: 0;
}

@each $prop in margin, padding {
  @each $direction in top, bottom {
    .#{$prop}-#{$direction}-half { #{$prop}-#{$direction}: 0.5em; }
    @each $num in 1, 2, 3, 4 {
      .#{$prop}-#{$direction}-#{$num} { #{$prop}-#{$direction}: #{$num}em; }
    }
  }
}

// Float container

.float-container > * { float: left; }
.float-container:after,
.clear {
  visibility: hidden;
  display: block;
  font-size: 0;
  content: " ";
  clear: both;
  height: 0;
}

// Inline block container

.inline-block-container > * {
  @include inline-block;
  vertical-align: top;
}

// Atributes

.text-right { text-align: right; }
.text-center { text-align: center; }
.uppercase { text-transform: uppercase; }

// Grid

.gutters {
  padding-left: 0.5em; padding-right: 0.5em;
}

.trunk {
  width: 100%; max-width: $ref-width;
  margin: 0 auto;
}

.invisible { visibility: hidden; }
.L-show { display: block; display: initial !important; }
.L-hide { display: none !important; }

@include grid-with-prefix('L');

@media screen and (max-width: $tablet-breakpoint) {
  .M-show { display: block; display: initial !important; }
  .M-hide { display: none !important; }
  @include grid-with-prefix('M');
}

@media screen and (max-width: $phone-breakpoint) {
  .S-show { display: block; display: initial !important; }
  .S-hide { display: none !important;}
  @include grid-with-prefix('S');
}

