// Vars

$vendors: ('-webkit-','-moz-','-ms-','-o-','');
$body-size: 18px;
$ref-width: 1280px;

$mobile: (body-size: 18px, ref-width: 375px, breakpoint: 800px);

// Helpers

@function vw($size) {
  @return ($size / $ref-width * 100vw);
}

@mixin portrait {
  @media screen and (orientation: portrait) {
    @content;
  }
}

@mixin landscape {
  @media screen and (orientation: landscape) {
    @content;
  }
}

@mixin breakpoint($name) {
  @media screen and (max-width: map-get($name, breakpoint)) {
    $tmp-size: $body-size;
    $tmp-width: $ref-width;
    $body-size: map-get($name, body-size) !global;
    $ref-width: map-get($name, ref-width) !global;
    @content;
    $body-size: $tmp-size !global;
    $ref-width: $tmp-width !global;
  }
}

@mixin orientated-breakpoint($name, $orientation: portrait) {
  @media screen and (orientation: $orientation) and (max-width: map-get($name, breakpoint)) {
    $tmp-size: $body-size;
    $tmp-width: $ref-width;
    $body-size: map-get($name, body-size) !global;
    $ref-width: map-get($name, ref-width) !global;
    @content;
    $body-size: $tmp-size !global;
    $ref-width: $tmp-width !global;
  }
}

@mixin not-orientated-breakpoint($name, $orientation: portrait) {
  @media not screen and (orientation: $orientation) and (max-width: map-get($name, breakpoint)) {
    $tmp-size: $body-size;
    $tmp-width: $ref-width;
    $body-size: map-get($name, body-size) !global;
    $ref-width: map-get($name, ref-width) !global;
    @content;
    $body-size: $tmp-size !global;
    $ref-width: $tmp-width !global;
  }
}

@mixin mobile {
  @include breakpoint($mobile) {
    @content;
  }
}

@mixin mobile-portrait {
  @include orientated-breakpoint($mobile) {
    @content;
  }
}

@mixin not-mobile-portrait {
  @media not screen and (orientation: portrait) and (max-width: map-get($mobile, breakpoint)) {
    @content;
  }
}

@mixin retina {
  @media (min--moz-device-pixel-ratio: 1.3), (-o-min-device-pixel-ratio: 2.6/2), (-webkit-min-device-pixel-ratio: 1.3), (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {     
    @content;
  }
}

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @-o-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

@mixin inline-block {
  display: -moz-inline-stack;
  display: inline-block;
}

@mixin flexbox {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex:  $values;
  -webkit-flex:  $values;
  -ms-flex:  $values;
  flex:  $values;
}

@mixin order($val) {
  -webkit-box-ordinal-group: $val;
  -moz-box-ordinal-group: $val;
  -ms-flex-order: $val;
  -webkit-order: $val;
  order: $val;
}

@mixin vendor($key, $val...) {
  // Low level mixin for prepending a property with known vendor prefixes
  @each $vendor in $vendors {
    #{$vendor}#{$key}: $val; 
  }
}

@mixin transition($val...) {
  @include vendor(transition, $val);
}

@mixin animation($val...) {
  @include vendor(animation, $val);
}

@mixin transform($val...) {
  @include vendor(transform, $val);
}

@mixin box-sizing($val...) {
  @include vendor(box-sizing, $val);
}

@mixin column-count($val...) {
  @include vendor(column-count, $val);
}

@mixin column-gap($val...) {
  @include vendor(column-gap, $val);
}

@mixin opacity($val) {
  $ieval: $val*100;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$ieval+")";
  filter: alpha(opacity=$ieval);
  -moz-opacity: $val;
  -khtml-opacity: $val;
  opacity: $val;
}

@mixin fixed-proportions-wrap($width: 16, $height: 9) {
  position: relative; 
  height: 0; overflow: hidden;
  padding-bottom: ($height / $width * 100%);
  & > * {
    position: absolute; left: 0; top: 0;
    width: 100%; height: 100%;
  }
}

@mixin optional-at-root($sel) {
  @at-root #{if(not &, $sel, selector-append(&, $sel))} {
    @content;
  }
}

@mixin placeholder {
  @include optional-at-root('::-webkit-input-placeholder') {
    @content;
  }
  @include optional-at-root(':-moz-placeholder') {
    @content;
  }
  @include optional-at-root('::-moz-placeholder') {
    @content;
  }
  @include optional-at-root(':-ms-input-placeholder') {
    @content;
  }
  @include optional-at-root('::-ms-input-placeholder') {
    @content;
  }
  @include optional-at-root('::placeholder') {
    @content;
  }
}

// Resets

* { @include box-sizing(border-box); }

img { border: 0; margin: 0; padding: 0; width: 100%; display: block; }
.not-100-percent { width: auto; }
ul, ol { list-style: none; margin: 0; padding: 0; }
html { 
  font-size: 100%; 
  //  text-rendering: optimizeLegibility;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
body, html { margin: 0; padding: 0; }
address { font-style: normal; }

article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display:block;
}

iframe { border: 0; }

a { color: inherit; }

// Layout

.margin-top-0,
.strip-margins-container > *:first-child {
  margin-top: 0;
}
.margin-bottom-0,
.strip-margins-container > *:last-child {
  margin-bottom: 0;
}

// Debug spacing problems

%debug {
  * { background-color: rgba(255,0,0,.2); }
  * * { background-color: rgba(0,255,0,.2); }
  * * * { background-color: rgba(0,0,255,.2); }
  * * * * { background-color: rgba(255,0,255,.2); }
  * * * * * { background-color: rgba(0,255,255,.2); }
  * * * * * * { background-color: rgba(255,255,0,.2); }
  * * * * * * * { background-color: rgba(255,0,0,.2); }
  * * * * * * * * { background-color: rgba(0,255,0,.2); }
  * * * * * * * * * { background-color: rgba(0,0,255,.2); }
}

